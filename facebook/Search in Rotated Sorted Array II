Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Write a function to determine if a given target is in the array.

The array may contain duplicates.


// 3.8
public class Solution {
    public boolean search(int[] nums, int target) {
        if(nums == null || nums.length == 0) return false;
        int start = 0, end = nums.length - 1;
        while(start + 1 < end) {
            int mid = start + (end - start) / 2;
            if(nums[start] < nums[mid]) {
                if(target <= nums[mid] && target >= nums[start]) end = mid;
                else start = mid;
            } else if(nums[start] > nums[mid]) {
                if(nums[mid] <= target && nums[end] >= target) start = mid;
                else end = mid;
            } else if (nums[start] == target) return true;
            else start++;
        }
        if(nums[start] == target || nums[end] == target) return true;
        return false; 
    }
}
