Given preorder and inorder traversal of a tree, construct the binary tree.


// 3.6
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    public int preStart = 0;
    public Map<Integer, Integer> map;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        map = new HashMap<Integer, Integer>();
        preStart = 0;
        for(int i = 0; i < inorder.length; i++) map.put(inorder[i], i);
        return build(preorder, 0, inorder.length - 1);
    }
    
    public TreeNode build(int[] preorder, int start, int end) {
        if(start > end || preStart >= preorder.length) return null;
        TreeNode root = new TreeNode(preorder[preStart]);  
        int mid = map.get(preorder[preStart]);
        preStart++;
        root.left = build(preorder, start, mid - 1);
        root.right = build(preorder, mid + 1, end);
        return root;
    }
}
