Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,
         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL


// 3.6
/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root == null) return;
        TreeLinkNode nextFirst = root.next;
        while (nextFirst != null) {
            if (nextFirst.left != null) {
                nextFirst = nextFirst.left;
                break;
            } else if (nextFirst.right != null) {
                nextFirst = nextFirst.right;
                break;
            } else nextFirst = nextFirst.next;
        }
        if (root.right != null) root.right.next = nextFirst;
        if (root.left != null) {
            if (root.right != null) root.left.next = root.right;
            else root.left.next = nextFirst;
        }
        // 先左后右就错了
        // connect(root.left);
        // connect(root.right);
        connect(root.right);
        connect(root.left);
    }
}
