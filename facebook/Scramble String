Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.


// 3.8
public class Solution {
    public boolean isScramble(String s1, String s2) {
        if (s1.equals(s2)) return true;
        char[] s1chars = s1.toCharArray();
        char[] s2chars = s2.toCharArray();
        Arrays.sort(s1chars);
        Arrays.sort(s2chars);
        for (int i = 0; i < s1chars.length; i++) {
            if (s1chars[i] != s2chars[i]) return false;
        }

        int half = 1;
        boolean result = false;
        while (half < s1.length()) {
            result = (isScramble(s1.substring(0, half), s2.substring(0, half))
                    && isScramble(s1.substring(half, s1.length()), s2.substring(half, s2.length())))
                    || (isScramble(s1.substring(0, half), s2.substring(s2.length() - half, s2.length()))
                    && isScramble(s1.substring(half, s1.length()), s2.substring(0, s2.length() - half)));
            if (result) return true;
            half++;
        }
        return result;
    }
}
