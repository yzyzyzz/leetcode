You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

For example, given the 2D grid:

INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:

  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
  
解答：每一次加入进来的结点，都时当前位置gate可到达的最短距离。用BFS逐层扫


public void wallsAndGates(int[][] rooms) {
    if (rooms == null || rooms.length == 0 || rooms[0].length == 0) return;
    Queue<int[]> q = new LinkedList<>();
    int m = rooms.length, n = rooms[0].length;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (rooms[i][j] == 0) {
                q.add(new int[]{i, j});
            }
        }
    }
    
    int[][] dir = {{-1, 0},{1, 0},{0, 1},{0, -1}};
    while (!q.isEmpty()) {
        int[] curt = q.poll();
        int i = curt[0], j = curt[1];
        for (int k = 0; k < dir.length; k++) {
            int x = i + dir[k][0], y = j + dir[k][1];
            if (x < 0 || x > m - 1 || y < 0 || y > n - 1 || rooms[x][y] != Integer.MAX_VALUE) {
                continue;
            }
            rooms[x][y] = rooms[i][j] + 1;
            q.add(new int[] {x, y});
        }
    }
}
