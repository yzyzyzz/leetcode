LFU (Least Frequently Used) is a famous cache eviction algorithm.

For a cache with capacity k, if the cache is full and need to evict a key in it, the key with the lease frequently used will be kicked out.

Implement set and get method for LFU cache.


// 3.6
// 3.6
public class LFUCache {

    private class Node {
        Node pre;
        Node next;
        int count;
        LinkedHashSet<Integer> keys = new LinkedHashSet<>();
        public Node(int count, int key) {
            this.count = count;
            this.pre = null;
            this.next = null;
            keys.add(key);
        }
    }
    
    private HashMap<Integer, Node> nMap = new HashMap<Integer, Node>();
    private HashMap<Integer, Integer> vMap = new HashMap<Integer, Integer>();
    private Node head = null;
    private int capacity;
    public LFUCache(int capacity) {
        this.capacity = capacity;
    }
    
    public int get(int key) {
        if(!vMap.containsKey(key)) return -1;
        increase(key, nMap.get(key));
        return vMap.get(key);
    }
    
    public void put(int key, int value) {
        if(!vMap.containsKey(key)) {
            if(vMap.size() == capacity) remove();
            addNode(key);
        } else increase(key, nMap.get(key));
        vMap.put(key, value);
    }
    
    private void increase(int key, Node d)
    {
        if(d.next == null) {
            d.next = new Node(d.count + 1, key);
            d.next.pre = d;
        } else if(d.next.count != d.count + 1) {
            Node n = new Node(d.count + 1, key);
            n.next = d.next;
            d.next.pre = n;
            n.pre = d;
            d.next = n;
        } else {
            d.next.keys.add(key);
        }
        
        nMap.put(key, d.next);
        d.keys.remove(key);
        if(d.keys.isEmpty()) removeNode(d);
    }
    
    private void addNode(int key)
    {
        if(head == null) head = new Node(1, key);
        else if(head.count == 1) head.keys.add(key);
        else {
            Node d = new Node(1, key);
            d.next = head;
            head.pre = d;
            head = d;
        }
        nMap.put(key, head);
    }
    
    private void removeNode(Node d)
    {
        if(head == d) head = d.next;
        else if(d.next == null) d.pre.next = null;
        else {
            d.pre.next = d.next;
            d.next.pre = d;
        }
        d.pre = null;
        d.next = null;
    }
    
    private void remove()
    {
        if(head == null) return;
        int oldest = head.keys.iterator().next();
        head.keys.remove(oldest);
        if(head.keys.isEmpty()) removeNode(head);
        nMap.remove(oldest);
        vMap.remove(oldest);
    }
}

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache obj = new LFUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
