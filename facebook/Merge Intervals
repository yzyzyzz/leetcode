Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].


// 3.3
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    private class IntervalComparator implements Comparator<Interval>
    {
        @Override
        public int compare(Interval i1, Interval i2)
        {
            return i1.start - i2.start;
        }
    }
    
    public List<Interval> merge(List<Interval> intervals) {
        if(intervals == null || intervals.size() < 2) return intervals;
        Collections.sort(intervals, new IntervalComparator());       
        List<Interval> res = new ArrayList<Interval>();
        Interval start = intervals.get(0);
        for(int i = 1; i < intervals.size(); i++) {
            if(start.end < intervals.get(i).start) {
                res.add(start);
                start = intervals.get(i);
            } else {
                start.end = Math.max(start.end, intervals.get(i).end);
            }
        }
        res.add(start);
        return res;
    }
}
