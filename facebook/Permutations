Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]


// 3.6
public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> list = new ArrayList<Integer>();
        Set<Integer> set = new HashSet<Integer>();
        permute(res, list, nums, set);
        return res;
    }
    
    private void permute(List<List<Integer>> res, List<Integer> list, int[] nums, Set<Integer> set) {
        if(list.size() == nums.length) {
            res.add(new ArrayList(list));
            return;
        }
        for(int i = 0; i < nums.length; i++) {
            if(set.contains(nums[i])) continue;
            set.add(nums[i]);
            list.add(nums[i]);
            permute(res, list, nums, set);
            list.remove(list.size() - 1);
            set.remove(nums[i]);
        }
    }
}
