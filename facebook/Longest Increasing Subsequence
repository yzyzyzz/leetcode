Given an unsorted array of integers, find the length of longest increasing subsequence.

For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.

Your algorithm should run in O(n2) complexity.

Follow up: Could you improve it to O(n log n) time complexity?


// 3.4
// 解法非常巧妙，建立一个新数组然后让旧的数字一个一个insert. 如果是个最大的则insert到最后一个index+1，数组长度变化 len++，否则
// 就不是最大的，就去数组中间replace某个中间大的值 
public class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums == null || nums.length == 0) return 0;
        int[] A = new int[nums.length];
        int len = 1;
        A[0] = nums[0];
        for(int i  = 1; i < nums.length; i++) {
            int index = insert(A, 0, len - 1, nums[i]);
            A[index] = nums[i];
            if(index == len) len++;
        }
        return len;
    }
    
    // https://www.lintcode.com/en/problem/search-insert-position/
    public int insert(int[] A, int start, int end, int target) {
        if(start > end) return start;
        while(start + 1 < end)
        {
            int mid = start + (end - start) / 2;
            if(A[mid] == target) return mid;
            else if(A[mid] < target) start = mid;
            else end = mid;
        }
        
        if(target <= A[start]) return start;
        else if(target <= A[end]) return end;
        else return end + 1;
    }
}
