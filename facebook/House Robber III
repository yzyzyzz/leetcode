The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:
     3
    / \
   2   3
    \   \ 
     3   1
Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
Example 2:
     3
    / \
   4   5
  / \   \ 
 1   3   1
Maximum amount of money the thief can rob = 4 + 5 = 9.


// 3.3
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    // 加个map缓存 增加效率
    public HashMap<TreeNode, Integer> map = new HashMap<TreeNode, Integer>(); 
    public int rob(TreeNode root) {
        if(root == null) return 0;
        if(map.containsKey(root)) return map.get(root);
        
        int child = rob(root.left) + rob(root.right);
        // subleft = root.left.left + root.left.right，这里少了rob(root.left.right)
        // int subleft = root.left == null ? 0 : rob(root.left.left);
        // int subright = root.right == null ? 0 : rob(root.right.right);
        // int val = Math.max(child, root.val + subleft + subright);
        int subleft = root.left == null ? 0 : rob(root.left.left) + rob(root.left.right);
        int subright = root.right == null ? 0 : rob(root.right.right) + rob(root.right.left);
        int val = Math.max(child, root.val + subleft + subright);
        map.put(root, val);
        return val;
    }
}
