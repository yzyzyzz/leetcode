Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.

Note: The input string may contain letters other than the parentheses ( and ).

Examples:
"()())()" -> ["()()()", "(())()"]
"(a)())()" -> ["(a)()()", "(a())()"]
")(" -> [""]

// 3.8
public class Solution {
    public List<String> removeInvalidParentheses(String s) {
        List<String> result = new ArrayList<String>();
        remove(s, result, 0, 0, ')');
        return result;
    }
    
    public void remove(String s, List<String> result, int last_i, int last_j, char ch) {
        for (int stack = 0, i = last_i; i < s.length(); i++) {
            if(s.charAt(i) == '(' || s.charAt(i) == ')') stack += s.charAt(i) == ch ? -1 : 1;
            if (stack >= 0) continue;
            for (int j = last_j; j <= i; j++) {
                if (s.charAt(j) == ch && (j == last_j || s.charAt(j - 1) != ch)) {
                    remove(s.substring(0, j) + s.substring(j + 1, s.length()), result, i, j, ch);
                }
            }
            return;
        }
        
        String reversed = new StringBuilder(s).reverse().toString();
        if (ch == ')') remove(reversed, result, 0, 0, '(');
        else result.add(reversed);
    }
}
