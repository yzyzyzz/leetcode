You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:
Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

There are 5 ways to assign symbols to make the sum of nums be target 3.


// dfs
public class Solution {    
    public int count = 0;
    public int findTargetSumWays(int[] nums, int S) {
        dfs(nums, S, 0, 0);
        return count;
    }
    
    public void dfs(int[] nums, int S, int index, int sum) {
        int res = 0;
        if(index == nums.length) {
            if(sum == S) count++;
            return;
        }
        dfs(nums, S, index + 1, sum + nums[index]);
        dfs(nums, S, index + 1, sum - nums[index]);
    }
}

// dp
public class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        int sum = 0;
        for (int num : nums) sum += num;
        if (sum < Math.abs(S)) return 0;

        //init for dp
        int doubleSum = sum * 2;      // sum表示0， 0 - sum表示负，sum+1 - 2sum+1表示正
        int[][] dp = new int[nums.length][doubleSum + 1];
        if (nums[0] == 0) {
            dp[0][sum] = 2;
        } else {
            dp[0][sum - nums[0]] = 1;
            dp[0][sum + nums[0]] = 1;
        }

        //dp
        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j <= doubleSum; j++) {
                if (j - nums[i] >= 0) {
                    dp[i][j] += dp[i - 1][j - nums[i]];
                }
                if (j + nums[i] <= doubleSum) {
                    dp[i][j] += dp[i - 1][j + nums[i]];
                }
            }
        }

        return dp[nums.length - 1][S + sum];
    }
    
}
