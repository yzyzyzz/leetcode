Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.

Example:

nums = [1, 2, 3]
target = 4

The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)

Note that different sequences are counted as different combinations.

Therefore the output is 7.


public class Solution {
    
    // 可以 但是超时
    // public int count;
    // public int combinationSum4(int[] nums, int target) {
    //     List<Integer> list = new ArrayList<Integer>();
    //     count = 0;
    //     dfs(list, nums, target);
    //     return count;
    // }
    
    // public void dfs(List<Integer> list, int[] candidates, int target) {
    //     if(target < 0) return;
    //     if(target == 0) {
    //         count++;
    //         return;
    //     }
        
    //     for(int i = 0; i < candidates.length; i++) {
    //         list.add(candidates[i]);
    //         dfs(list, candidates, target - candidates[i]);
    //         list.remove(list.size() - 1);
    //     }
    // }
    
    
    public int combinationSum4(int[] nums, int target) {
        int[] dp = new int[target + 1];
        Arrays.sort(nums);
        dp[0] = 1;
        for (int i = 1; i <= target; i++) {
            for (int num: nums) {
                if (num <= i) dp[i] += dp[i-num];
            }
        }
        return dp[target];
    }
}
