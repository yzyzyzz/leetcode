Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

// 3.6
public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> list = new ArrayList<Integer>();
        Set<Integer> set = new HashSet<Integer>();
        permute(res, list, nums, set);
        return res;
    }
    
    private void permute(List<List<Integer>> res, List<Integer> list, int[] nums, Set<Integer> set) {
        if(list.size() == nums.length) {
            res.add(new ArrayList(list));
            return;
        }
        for(int i = 0; i < nums.length; i++) {
            if(set.contains(i) || (i > 0 && nums[i] == nums[i - 1] && set.contains(i - 1))) continue;
            set.add(i);
            list.add(nums[i]);
            permute(res, list, nums, set);
            list.remove(list.size() - 1);
            set.remove(i);
        }
    }
}
