Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

For example,
Given words = ["oath","pea","eat","rain"] and board =

[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
Return ["eat","oath"].

class Trie {
    private static class TrieNode {
        private boolean isWord;
        TrieNode[] children;
        
        public TrieNode()
        {
            isWord = false;
            children = new TrieNode[26];
            for(int i = 0; i < 26; i++) children[i] = null;
        }
    }
    
    private TrieNode root;
    
    public Trie() {
        root = new TrieNode();
    }
    
    public void insert(String word) {
        TrieNode node = root;
        for(int i = 0; i < word.length(); i++) {
            int c = word.charAt(i) - 'a';
            if(node.children[c] == null) node.children[c] = new TrieNode();
            node = node.children[c];
        }
        node.isWord = true;
    }
    
    public boolean search(String word) {
        TrieNode node = traverse(word);
        return node == null ? false : node.isWord;
    }
    
    public boolean startWith(String prefix) {
        TrieNode node = traverse(prefix);
        return node != null;
    }
    
    public TrieNode traverse(String word) {
        TrieNode node = root;
        for(int i = 0; i < word.length(); i++) {
            int c = word.charAt(i) - 'a';
            if(node.children[c] == null) return null;
            node = node.children[c];
        }
        return node;
    }
}

public class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new ArrayList<String>();
        if(board == null || board.length == 0 || board[0].length == 0) return res;
        
        boolean[][] visit = new boolean[board.length][board[0].length];
        Trie trie = new Trie();
        
        for(int i = 0; i < words.length; i++) trie.insert(words[i]);
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[0].length; j++) {
                search(board, res, trie, visit, new StringBuilder(), i, j);
            }
        }
        return res;
    }
    
    private void search(char[][] board, List<String> res, Trie trie, boolean[][] visit, StringBuilder sb, int i, int j)
    {
        if(i < 0 || j < 0 || i == board.length || j == board[0].length || visit[i][j]) return;
        
        visit[i][j] = true;
        sb.append(board[i][j]);
        
        if(trie.startWith(sb.toString()))
        {
            if(trie.search(sb.toString()) && !res.contains(sb.toString()))
            {
                res.add(sb.toString());
                // dont need 'return', otherwise will be wrong
                // return;
            }
            search(board, res, trie, visit, sb, i + 1, j);
            search(board, res, trie, visit, sb, i, j + 1);
            search(board, res, trie, visit, sb, i - 1, j);
            search(board, res, trie, visit, sb, i, j - 1);
        }
        visit[i][j] = false;
        sb.deleteCharAt(sb.length() - 1);
    }
}
