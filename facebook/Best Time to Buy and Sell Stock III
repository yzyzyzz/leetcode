Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).



// 3.1
public class Solution {
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length == 0) return 0;
        int[] leftMost = new int[prices.length];
        int[] rightMost = new int[prices.length];
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        int lmaxValue = 0;
        int rmaxValue = 0;
        for(int i = 0; i < prices.length; i++)
        {
            min = Math.min(min, prices[i]);
            lmaxValue = Math.max(lmaxValue, prices[i] - min);
            leftMost[i] = lmaxValue;
            
            max = Math.max(max, prices[prices.length - 1 - i]);
            rmaxValue = Math.max(rmaxValue, max - prices[prices.length - 1 - i]);
            rightMost[prices.length - 1 - i] = rmaxValue;
        }
        
        int maxValue = 0;
        for(int i = 0; i < prices.length; i++) maxValue = Math.max(maxValue, leftMost[i] + rightMost[i]);
        return maxValue;
    }
}
