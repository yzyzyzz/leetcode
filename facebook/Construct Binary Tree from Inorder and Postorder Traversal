Given inorder and postorder traversal of a tree, construct the binary tree.

// 3.6
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    public int postStart = 0;
    public Map<Integer, Integer> map;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        map = new HashMap<Integer, Integer>();
        postStart = postorder.length - 1;
        for(int i = 0; i < inorder.length; i++) map.put(inorder[i], i);
        return build(postorder, 0, inorder.length - 1);
    }
    
    public TreeNode build(int[] postorder, int start, int end) {
        if(start > end || postStart < 0) return null;
        TreeNode root = new TreeNode(postorder[postStart]);  
        int mid = map.get(postorder[postStart]);
        postStart--;
        root.right = build(postorder, mid + 1, end);
        root.left = build(postorder, start, mid - 1);
        return root;
    }
}
