class TrieNode {
    public TrieNode[] children;
    public boolean isWord;
    public TrieNode()
    {
        this.children = new TrieNode[26];
        this.isWord = false;
    }
}

public class WordDictionary {

    /** Initialize your data structure here. */
    private TrieNode root;
    
    public WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode next = root;
        for(int i = 0; i < word.length(); i++)
        {
            int pos = word.charAt(i) - 'a';
            if(next.children[pos] == null) next.children[pos] = new TrieNode(); 
            next = next.children[pos]; 
        }
        next.isWord = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return search(word, 0, root);
    }
    
    private boolean search(String word, int pos, TrieNode t)
    {
        if(pos == word.length()) return t.isWord;
        
        char c = word.charAt(pos);
        if(c == '.')
        {
            for(int i = 0; i < 26; ++i) 
            if (t.children[i] != null) 
            {
                if (search(word, pos + 1, t.children[i])) return true;
            }
            return false;    
        }
        else if(t.children[c - 'a'] != null)
        {
            return search(word, pos + 1, t.children[c - 'a']);
        }
        else
        {
            return false;
        }
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
