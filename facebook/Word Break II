Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. You may assume the dictionary does not contain duplicate words.

Return all such possible sentences.

For example, given
s = "catsanddog",
dict = ["cat", "cats", "and", "sand", "dog"].

A solution is ["cats and dog", "cat sand dog"].
public class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
        boolean[] canBreak = new boolean[s.length() + 1];
        canBreak[0] = true;
        for(int i = 1; i <= s.length(); i++) {
            canBreak[i] = false;
            for(int j = 0; j < i; j++) {
                if(canBreak[j] && wordDict.contains(s.substring(j, i))) {
                    canBreak[i] = true;
                    break;
                }
            }
        }
        
        List<String> res = new ArrayList<String>();
        dfs(res, s, wordDict, new ArrayList<String>(), canBreak, s.length());
        return res;
    }
    
    public void dfs(List<String> res, String s, List<String> wordDict, List<String> list, boolean[] canBreak, int index) {
        if(!canBreak[index]) return;
        else if(index == 0) {
            StringBuilder sb = new StringBuilder();
            for(int i = list.size() - 1; i >= 0; i--) sb.append(list.get(i)).append(' ');
            sb.deleteCharAt(sb.length() - 1);
            res.add(sb.toString());
            return;
        }

        for(int i = index - 1; i >= 0; i--) {
            String rightString = s.substring(i, index);
            if(!canBreak[i] || !wordDict.contains(rightString)) continue;
            list.add(rightString);
            dfs(res, s, wordDict, list, canBreak, i);
            list.remove(list.size() - 1);
        }
    }
}
