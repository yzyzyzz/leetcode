There are a total of n courses you have to take, labeled from 0 to n - 1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

For example:

2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.

2, [[1,0],[0,1]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.



// 3.2
public class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (prerequisites == null || prerequisites.length == 0 || prerequisites[0].length == 0) return true;
        int[] indgree = new int[numCourses]; 
        List[] children = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) children[i] = new ArrayList<Integer>();
        //写入有向图的next节点
        for (int i = 0; i < prerequisites.length; i++) {
            children[prerequisites[i][1]].add(prerequisites[i][0]);
            indgree[prerequisites[i][0]]++;
        }
        Queue<Integer> queue = new LinkedList<Integer>();
        for(int i = 0; i < indgree.length; i++){
            if(indgree[i] == 0) queue.add(i);
        }    
        int count = 0;
        while(!queue.isEmpty()) {
            int cur = queue.poll();
            count++;
            List<Integer> list = children[cur];
            for(Integer i : list) {
                indgree[i]--;
                if(indgree[i] == 0) queue.offer(i);
            }
        
        }
        return count == numCourses;
    }
}
