Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]


// 3.2
public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> list = new ArrayList<Integer>();
        dfs(res, list, candidates, target, 0);
        return res;
    }
    
    public void dfs(List<List<Integer>> res, List<Integer> list, int[] candidates, int target, int index) {
        if(target < 0) return;
        if(target == 0) {
            res.add(new ArrayList<Integer>(list));
            return;
        }
        
        for(int i = index; i < candidates.length; i++) {
            list.add(candidates[i]);
            dfs(res, list, candidates, target - candidates[i], i);
            list.remove(list.size() - 1);
            while(i < candidates.length - 1 && candidates[i] == candidates[i+1]) i++;
        }
    }
}
