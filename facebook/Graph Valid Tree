Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example
Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.


// 3.2
public class Solution {
    /**
     * @param n an integer
     * @param edges a list of undirected edges
     * @return true if it's a valid tree, or false
     */
    public boolean validTree(int n, int[][] edges) {
        // Write your code here
        
        int[] root = new int[n];  
        for(int i = 0; i < n; i++)  root[i] = i;
        for(int i = 0; i < edges.length; i++) 
        {  
            int root1 = find(root, edges[i][0]);  
            int root2 = find(root, edges[i][1]);  
            
            if(root1 == root2) return false;  
            root[root2] = root1;  
        }  
        return edges.length == n - 1;  
    }  
      
    private int find(int[] root, int e) 
    {  
        if(root[e] == e) return e;  
        else return find(root, root[e]);  
    }
}
