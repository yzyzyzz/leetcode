// 这个题有个问题，就是leetcode和lintcode的判定条件不一样，比如下面
// start = "hit"
// end = "cog"
// dict = ["hot","dot","dog","lot","log"]
// 在lintcode里成立，在leetcode里错了，因为leetcode的要求是transfer的下个字符必须在dict离， 而cog没在dict里，那么就不能被transfer算作nextword
// 唯一的不同在，生成完nextWord后，是先判定nextWord在不在dict里，还是可以直接和endWord相比

public class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> dict = new HashSet<>();
        for (String word : wordList) dict.add(word);
        if (beginWord.equals(endWord)) return 1;
        
        HashSet<String> set = new HashSet<String>();
        Queue<String> q = new LinkedList<String>();
        q.offer(beginWord);
        set.add(beginWord);
        int len = 1;
        while(!q.isEmpty()) {
            len++;
            int size = q.size();
            for(int i = 0; i < size; i++) {
                String s = q.poll();    
                List<String> nextWords = getNextWords(s, dict);
                for(String word : nextWords) {
                    if(set.contains(word)) continue;
                    else if(endWord.equals(word)) return len;
                    else {
                        q.offer(word);
                        set.add(word);
                    }
                }
            }
        }
        return 0;
    }
    
    private ArrayList<String> getNextWords(String word, Set<String> dict) {
        ArrayList<String> nextWords = new ArrayList<String>();
        for (int i = 0; i < word.length(); i++) {
            char[] chars = word.toCharArray();
            for (char c = 'a'; c <= 'z'; c++) {
                chars[i] = c;
                String nextWord = new String(chars);
                if (dict.contains(nextWord)) nextWords.add(nextWord);
            }
        }
        return nextWords;
    }
}
