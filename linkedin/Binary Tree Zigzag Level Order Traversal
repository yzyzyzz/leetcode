/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {

    public class Solution {
        public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
            List<List<Integer>> res = new ArrayList<List<Integer>>();
            if(root == null) return res;
            Queue<TreeNode> q = new LinkedList();
            q.offer(root);
            int level = 0;
            while(!q.isEmpty()) {
                int size = q.size();
                List<Integer> list = new ArrayList();
                for(int i = 0; i < size; i++) {
                    TreeNode node = q.poll();
                    if(level % 2 == 0) list.add(node.val);
                    else list.add(0, node.val);
                    if(node.left != null) q.offer(node.left);
                    if(node.right != null) q.offer(node.right);
                }
                res.add(list);
                level ++;
            }
            return res;
        }
    }
    
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        dfs(res, root, 0);
        return res;
    }
    
    public void dfs(List<List<Integer>> res, TreeNode root, int level) {
        if(root == null) return;
        if(res.size() < level + 1) res.add(new ArrayList());
        List<Integer> list = res.get(level);
        if(level % 2 == 0) list.add(root.val);
        else list.add(0, root.val);
        dfs(res, root.left, level + 1);
        dfs(res, root.right, level + 1);
    }
}
