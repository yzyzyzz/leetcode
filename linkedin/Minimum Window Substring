Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

For example,
S = "ADOBECODEBANC"
T = "ABC"
Minimum window is "BANC"

public class Solution {
    public String minWindow(String s, String t) {
        String res = "";
        if(s == null || t == null || s.length() == 0 || t.length() == 0) return res;
        Map<Character, Integer> dict = new HashMap<Character, Integer>();
        for(int i = 0; i < t.length(); i++) 
        {
            if(dict.containsKey(t.charAt(i))) dict.put(t.charAt(i), dict.get(t.charAt(i)) + 1);
            else dict.put(t.charAt(i), 1);
        }

        int pre = 0, count = 0, min = Integer.MAX_VALUE;
        for(int i = 0; i < s.length(); i++)
        {
            if(dict.containsKey(s.charAt(i)))
            {
                dict.put(s.charAt(i),dict.get(s.charAt(i))-1);
                if(dict.get(s.charAt(i)) >= 0) count++;
            }
            
            while(count == t.length())
            {
                if(dict.containsKey(s.charAt(pre)))
                {
                    dict.put(s.charAt(pre), dict.get(s.charAt(pre)) + 1);
                    if(dict.get(s.charAt(pre)) > 0)
                    {
                        if(min > i - pre + 1)
                         {
                             res = s.substring(pre, i + 1);
                             min = i - pre + 1;
                         }
                        count--;
                    }
                }
                pre++;
            }
         }
         return res;
    }
}
